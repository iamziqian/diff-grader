{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:8080/api';const api=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json'}});// Request interceptor for auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('authToken');window.location.href='/login';}return Promise.reject(error);});export const apiService={// File upload\nuploadFile:async(file,type,onProgress)=>{const formData=new FormData();formData.append('file',file);formData.append('type',type);const response=await api.post('/files/upload',formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{if(onProgress&&progressEvent.total){const progress={loaded:progressEvent.loaded,total:progressEvent.total,percentage:Math.round(progressEvent.loaded*100/progressEvent.total)};onProgress(progress);}}});return response.data;},// Create grading session\ncreateGradingSession:async(studentFileId,referenceFileId)=>{const response=await api.post('/grading-sessions',{studentFileId,referenceFileId});return response.data;},// Get grading session\ngetGradingSession:async sessionId=>{const response=await api.get(`/grading-sessions/${sessionId}`);return response.data;},// Get comparison result\ngetComparison:async sessionId=>{const response=await api.get(`/grading-sessions/${sessionId}/comparison`);return response.data;},// Submit feedback\nsubmitFeedback:async(sessionId,feedback)=>{const response=await api.post(`/grading-sessions/${sessionId}/feedback`,feedback);return response.data;},// Update feedback\nupdateFeedback:async(sessionId,feedbackId,feedback)=>{const response=await api.put(`/grading-sessions/${sessionId}/feedback/${feedbackId}`,feedback);return response.data;},// Get all feedback for a session\ngetFeedbacks:async sessionId=>{const response=await api.get(`/grading-sessions/${sessionId}/feedback`);return response.data;},// Complete grading session\ncompleteGradingSession:async(sessionId,overallScore,finalComments)=>{const response=await api.put(`/grading-sessions/${sessionId}/complete`,{overallScore,finalComments});return response.data;},// Get all grading sessions\ngetGradingSessions:async()=>{const response=await api.get('/grading-sessions');return response.data;},// Delete grading session\ndeleteGradingSession:async sessionId=>{const response=await api.delete(`/grading-sessions/${sessionId}`);return response.data;}};export default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","apiService","uploadFile","file","type","onProgress","formData","FormData","append","post","onUploadProgress","progressEvent","total","progress","loaded","percentage","Math","round","data","createGradingSession","studentFileId","referenceFileId","getGradingSession","sessionId","get","getComparison","submitFeedback","feedback","updateFeedback","feedbackId","put","getFeedbacks","completeGradingSession","overallScore","finalComments","getGradingSessions","deleteGradingSession","delete"],"sources":["/Users/ziqianfu/diff-grader/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosProgressEvent } from 'axios';\nimport { \n  APIResponse, \n  GradingSession, \n  ComparisonResult, \n  Feedback, \n  UploadProgress \n} from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // File upload\n  uploadFile: async (\n    file: File, \n    type: 'student' | 'reference',\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<APIResponse<{ fileId: string }>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', type);\n\n    const response = await api.post('/files/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress: (progressEvent: AxiosProgressEvent) => {\n        if (onProgress && progressEvent.total) {\n          const progress: UploadProgress = {\n            loaded: progressEvent.loaded,\n            total: progressEvent.total,\n            percentage: Math.round((progressEvent.loaded * 100) / progressEvent.total),\n          };\n          onProgress(progress);\n        }\n      },\n    });\n\n    return response.data;\n  },\n\n  // Create grading session\n  createGradingSession: async (\n    studentFileId: string, \n    referenceFileId: string\n  ): Promise<APIResponse<GradingSession>> => {\n    const response = await api.post('/grading-sessions', {\n      studentFileId,\n      referenceFileId,\n    });\n    return response.data;\n  },\n\n  // Get grading session\n  getGradingSession: async (sessionId: string): Promise<APIResponse<GradingSession>> => {\n    const response = await api.get(`/grading-sessions/${sessionId}`);\n    return response.data;\n  },\n\n  // Get comparison result\n  getComparison: async (sessionId: string): Promise<APIResponse<ComparisonResult>> => {\n    const response = await api.get(`/grading-sessions/${sessionId}/comparison`);\n    return response.data;\n  },\n\n  // Submit feedback\n  submitFeedback: async (\n    sessionId: string, \n    feedback: Omit<Feedback, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<APIResponse<Feedback>> => {\n    const response = await api.post(`/grading-sessions/${sessionId}/feedback`, feedback);\n    return response.data;\n  },\n\n  // Update feedback\n  updateFeedback: async (\n    sessionId: string, \n    feedbackId: string, \n    feedback: Partial<Feedback>\n  ): Promise<APIResponse<Feedback>> => {\n    const response = await api.put(`/grading-sessions/${sessionId}/feedback/${feedbackId}`, feedback);\n    return response.data;\n  },\n\n  // Get all feedback for a session\n  getFeedbacks: async (sessionId: string): Promise<APIResponse<Feedback[]>> => {\n    const response = await api.get(`/grading-sessions/${sessionId}/feedback`);\n    return response.data;\n  },\n\n  // Complete grading session\n  completeGradingSession: async (\n    sessionId: string, \n    overallScore: number, \n    finalComments: string\n  ): Promise<APIResponse<GradingSession>> => {\n    const response = await api.put(`/grading-sessions/${sessionId}/complete`, {\n      overallScore,\n      finalComments,\n    });\n    return response.data;\n  },\n\n  // Get all grading sessions\n  getGradingSessions: async (): Promise<APIResponse<GradingSession[]>> => {\n    const response = await api.get('/grading-sessions');\n    return response.data;\n  },\n\n  // Delete grading session\n  deleteGradingSession: async (sessionId: string): Promise<APIResponse<void>> => {\n    const response = await api.delete(`/grading-sessions/${sessionId}`);\n    return response.data;\n  },\n};\n\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}