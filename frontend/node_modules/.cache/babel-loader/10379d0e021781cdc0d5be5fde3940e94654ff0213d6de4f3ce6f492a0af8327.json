{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // File upload\n  uploadFile: async (file, type, onProgress) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', type);\n    const response = await api.post('/files/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        if (onProgress && progressEvent.total) {\n          const progress = {\n            loaded: progressEvent.loaded,\n            total: progressEvent.total,\n            percentage: Math.round(progressEvent.loaded * 100 / progressEvent.total)\n          };\n          onProgress(progress);\n        }\n      }\n    });\n    return response.data;\n  },\n  // Create grading session\n  createGradingSession: async (studentFileId, referenceFileId) => {\n    const response = await api.post('/grading-sessions', {\n      studentFileId,\n      referenceFileId\n    });\n    return response.data;\n  },\n  // Get grading session\n  getGradingSession: async sessionId => {\n    const response = await api.get(`/grading-sessions/${sessionId}`);\n    return response.data;\n  },\n  // Get comparison result\n  getComparison: async sessionId => {\n    const response = await api.get(`/grading-sessions/${sessionId}/comparison`);\n    return response.data;\n  },\n  // Submit feedback\n  submitFeedback: async (sessionId, feedback) => {\n    const response = await api.post(`/grading-sessions/${sessionId}/feedback`, feedback);\n    return response.data;\n  },\n  // Update feedback\n  updateFeedback: async (sessionId, feedbackId, feedback) => {\n    const response = await api.put(`/grading-sessions/${sessionId}/feedback/${feedbackId}`, feedback);\n    return response.data;\n  },\n  // Get all feedback for a session\n  getFeedbacks: async sessionId => {\n    const response = await api.get(`/grading-sessions/${sessionId}/feedback`);\n    return response.data;\n  },\n  // Complete grading session\n  completeGradingSession: async (sessionId, overallScore, finalComments) => {\n    const response = await api.put(`/grading-sessions/${sessionId}/complete`, {\n      overallScore,\n      finalComments\n    });\n    return response.data;\n  },\n  // Get all grading sessions\n  getGradingSessions: async () => {\n    const response = await api.get('/grading-sessions');\n    return response.data;\n  },\n  // Delete grading session\n  deleteGradingSession: async sessionId => {\n    const response = await api.delete(`/grading-sessions/${sessionId}`);\n    return response.data;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","apiService","uploadFile","file","type","onProgress","formData","FormData","append","post","onUploadProgress","progressEvent","total","progress","loaded","percentage","Math","round","data","createGradingSession","studentFileId","referenceFileId","getGradingSession","sessionId","get","getComparison","submitFeedback","feedback","updateFeedback","feedbackId","put","getFeedbacks","completeGradingSession","overallScore","finalComments","getGradingSessions","deleteGradingSession","delete"],"sources":["/Users/ziqianfu/diff-grader/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosProgressEvent } from 'axios';\nimport { \n  APIResponse, \n  GradingSession, \n  ComparisonResult, \n  Feedback, \n  UploadProgress \n} from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // File upload\n  uploadFile: async (\n    file: File, \n    type: 'student' | 'reference',\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<APIResponse<{ fileId: string }>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', type);\n\n    const response = await api.post('/files/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress: (progressEvent: AxiosProgressEvent) => {\n        if (onProgress && progressEvent.total) {\n          const progress: UploadProgress = {\n            loaded: progressEvent.loaded,\n            total: progressEvent.total,\n            percentage: Math.round((progressEvent.loaded * 100) / progressEvent.total),\n          };\n          onProgress(progress);\n        }\n      },\n    });\n\n    return response.data;\n  },\n\n  // Create grading session\n  createGradingSession: async (\n    studentFileId: string, \n    referenceFileId: string\n  ): Promise<APIResponse<GradingSession>> => {\n    const response = await api.post('/grading-sessions', {\n      studentFileId,\n      referenceFileId,\n    });\n    return response.data;\n  },\n\n  // Get grading session\n  getGradingSession: async (sessionId: string): Promise<APIResponse<GradingSession>> => {\n    const response = await api.get(`/grading-sessions/${sessionId}`);\n    return response.data;\n  },\n\n  // Get comparison result\n  getComparison: async (sessionId: string): Promise<APIResponse<ComparisonResult>> => {\n    const response = await api.get(`/grading-sessions/${sessionId}/comparison`);\n    return response.data;\n  },\n\n  // Submit feedback\n  submitFeedback: async (\n    sessionId: string, \n    feedback: Omit<Feedback, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<APIResponse<Feedback>> => {\n    const response = await api.post(`/grading-sessions/${sessionId}/feedback`, feedback);\n    return response.data;\n  },\n\n  // Update feedback\n  updateFeedback: async (\n    sessionId: string, \n    feedbackId: string, \n    feedback: Partial<Feedback>\n  ): Promise<APIResponse<Feedback>> => {\n    const response = await api.put(`/grading-sessions/${sessionId}/feedback/${feedbackId}`, feedback);\n    return response.data;\n  },\n\n  // Get all feedback for a session\n  getFeedbacks: async (sessionId: string): Promise<APIResponse<Feedback[]>> => {\n    const response = await api.get(`/grading-sessions/${sessionId}/feedback`);\n    return response.data;\n  },\n\n  // Complete grading session\n  completeGradingSession: async (\n    sessionId: string, \n    overallScore: number, \n    finalComments: string\n  ): Promise<APIResponse<GradingSession>> => {\n    const response = await api.put(`/grading-sessions/${sessionId}/complete`, {\n      overallScore,\n      finalComments,\n    });\n    return response.data;\n  },\n\n  // Get all grading sessions\n  getGradingSessions: async (): Promise<APIResponse<GradingSession[]>> => {\n    const response = await api.get('/grading-sessions');\n    return response.data;\n  },\n\n  // Delete grading session\n  deleteGradingSession: async (sessionId: string): Promise<APIResponse<void>> => {\n    const response = await api.delete(`/grading-sessions/${sessionId}`);\n    return response.data;\n  },\n};\n\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}