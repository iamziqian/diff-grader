{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Card,Form,Button,Row,Col,Alert,Badge}from'react-bootstrap';import apiService from'../services/api';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const FeedbackPanel=_ref=>{let{sessionId,selectedElement,selectedMatch,onFeedbackSaved,onError}=_ref;const[score,setScore]=useState(75);const[comments,setComments]=useState('');const[designPatternFeedback,setDesignPatternFeedback]=useState('');const[bestPracticesFeedback,setBestPracticesFeedback]=useState('');const[saving,setSaving]=useState(false);const[existingFeedback,setExistingFeedback]=useState(null);useEffect(()=>{if(selectedElement){loadExistingFeedback();}},[selectedElement,sessionId]);const loadExistingFeedback=async()=>{if(!selectedElement)return;try{const response=await apiService.getFeedbacks(sessionId);if(response.success){const feedback=response.data.find(f=>f.elementId===selectedElement.id);if(feedback){setExistingFeedback(feedback);setScore(feedback.score);setComments(feedback.comments);setDesignPatternFeedback(feedback.designPatternFeedback);setBestPracticesFeedback(feedback.bestPracticesFeedback);}else{resetForm();}}}catch(error){console.error('Failed to load existing feedback:',error);}};const resetForm=()=>{setExistingFeedback(null);setScore(75);setComments('');setDesignPatternFeedback('');setBestPracticesFeedback('');};const getScoreColor=score=>{if(score>=85)return'success';if(score>=70)return'warning';return'danger';};const getScoreLabel=score=>{if(score>=90)return'Excellent';if(score>=80)return'Good';if(score>=70)return'Satisfactory';if(score>=60)return'Needs Improvement';return'Poor';};const handleSave=async()=>{if(!selectedElement){onError('No element selected');return;}setSaving(true);try{const feedbackData={comparisonId:sessionId,elementId:selectedElement.id,score,comments:comments.trim(),designPatternFeedback:designPatternFeedback.trim(),bestPracticesFeedback:bestPracticesFeedback.trim()};let response;if(existingFeedback){response=await apiService.updateFeedback(sessionId,existingFeedback.id,feedbackData);}else{response=await apiService.submitFeedback(sessionId,feedbackData);}if(response.success){setExistingFeedback(response.data);onFeedbackSaved(response.data);}else{throw new Error(response.error||'Failed to save feedback');}}catch(error){onError(`Failed to save feedback: ${error instanceof Error?error.message:'Unknown error'}`);}finally{setSaving(false);}};const suggestFeedback=()=>{if(!selectedMatch)return;const similarity=selectedMatch.similarity;const differences=selectedMatch.differences;// Auto-suggest score based on similarity\nconst suggestedScore=Math.round(similarity*100);setScore(suggestedScore);// Auto-suggest comments based on differences\nif(differences.length>0){const suggestionMap={'method signature':'Consider reviewing method signatures for consistency with requirements.','naming convention':'Pay attention to Java naming conventions (camelCase for methods/variables, PascalCase for classes).','access modifier':'Review access modifiers - ensure proper encapsulation principles.','parameter':'Check method parameters - ensure they match the expected interface.','return type':'Verify return types match the specification.','exception handling':'Consider adding proper exception handling.','comments':'Add meaningful comments to explain complex logic.'};const suggestions=differences.map(diff=>{const key=Object.keys(suggestionMap).find(k=>diff.toLowerCase().includes(k));return key?suggestionMap[key]:`Review: ${diff}`;});setComments(suggestions.join('\\n\\n'));}// Suggest design pattern feedback\nif(selectedElement&&selectedElement.type==='class'){setDesignPatternFeedback('Consider applying relevant design patterns like Singleton, Factory, or Strategy pattern where appropriate.');}else if(selectedElement&&selectedElement.type==='method'){setDesignPatternFeedback('Ensure methods follow Single Responsibility Principle and are properly abstracted.');}// Suggest best practices feedback\nsetBestPracticesFeedback('Follow Java coding standards: proper indentation, meaningful variable names, and appropriate use of access modifiers.');};if(!selectedElement){return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{children:/*#__PURE__*/_jsx(\"h4\",{className:\"mb-0\",children:\"\\uD83D\\uDCDD Feedback Panel\"})}),/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center text-muted p-4\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-comment-alt fa-3x mb-3\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"Select an element to provide feedback\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Choose a code element from the comparison view to start grading\"})]})})]});}return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-between align-items-center\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"mb-0\",children:\"\\uD83D\\uDCDD Feedback Panel\"}),existingFeedback&&/*#__PURE__*/_jsx(Badge,{bg:\"info\",children:\"Previously Graded\"})]})}),/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(Alert,{variant:\"light\",className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Grading:\"}),\" \",selectedElement.name,/*#__PURE__*/_jsxs(\"span\",{className:\"text-muted\",children:[\" (\",selectedElement.type,\")\"]}),selectedMatch&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-1\",children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Similarity: \",/*#__PURE__*/_jsxs(Badge,{bg:getScoreColor(selectedMatch.similarity*100),children:[Math.round(selectedMatch.similarity*100),\"%\"]})]})})]}),/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{md:6,children:/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(Form.Label,{children:[\"Score: \",/*#__PURE__*/_jsxs(\"strong\",{children:[score,\"/100\"]}),/*#__PURE__*/_jsx(Badge,{bg:getScoreColor(score),className:\"ms-2\",children:getScoreLabel(score)})]}),/*#__PURE__*/_jsx(Form.Range,{value:score,onChange:e=>setScore(parseInt(e.target.value)),min:0,max:100,step:5}),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-between text-muted small\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"0\"}),/*#__PURE__*/_jsx(\"span\",{children:\"50\"}),/*#__PURE__*/_jsx(\"span\",{children:\"100\"})]})]})}),/*#__PURE__*/_jsx(Col,{md:6,children:/*#__PURE__*/_jsx(\"div\",{className:\"d-flex align-items-end h-100 pb-3\",children:/*#__PURE__*/_jsx(Button,{variant:\"outline-primary\",size:\"sm\",onClick:suggestFeedback,disabled:!selectedMatch,children:\"\\uD83E\\uDD16 Auto-suggest Feedback\"})})})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"General Comments\"}),/*#__PURE__*/_jsx(Form.Control,{as:\"textarea\",rows:3,value:comments,onChange:e=>setComments(e.target.value),placeholder:\"Provide specific feedback about this code element...\"})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Design Pattern Feedback\"}),/*#__PURE__*/_jsx(Form.Control,{as:\"textarea\",rows:2,value:designPatternFeedback,onChange:e=>setDesignPatternFeedback(e.target.value),placeholder:\"Comment on design patterns usage, SOLID principles, etc...\"})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Best Practices Feedback\"}),/*#__PURE__*/_jsx(Form.Control,{as:\"textarea\",rows:2,value:bestPracticesFeedback,onChange:e=>setBestPracticesFeedback(e.target.value),placeholder:\"Comment on coding standards, naming conventions, etc...\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-end\",children:/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:handleSave,disabled:saving||!comments.trim()&&!designPatternFeedback.trim()&&!bestPracticesFeedback.trim(),children:saving?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"spinner-border spinner-border-sm me-2\",role:\"status\",\"aria-hidden\":\"true\"}),\"Saving...\"]}):existingFeedback?'💾 Update Feedback':'💾 Save Feedback'})})]})]})]});};export default FeedbackPanel;","map":{"version":3,"names":["React","useState","useEffect","Card","Form","Button","Row","Col","Alert","Badge","apiService","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FeedbackPanel","_ref","sessionId","selectedElement","selectedMatch","onFeedbackSaved","onError","score","setScore","comments","setComments","designPatternFeedback","setDesignPatternFeedback","bestPracticesFeedback","setBestPracticesFeedback","saving","setSaving","existingFeedback","setExistingFeedback","loadExistingFeedback","response","getFeedbacks","success","feedback","data","find","f","elementId","id","resetForm","error","console","getScoreColor","getScoreLabel","handleSave","feedbackData","comparisonId","trim","updateFeedback","submitFeedback","Error","message","suggestFeedback","similarity","differences","suggestedScore","Math","round","length","suggestionMap","suggestions","map","diff","key","Object","keys","k","toLowerCase","includes","join","type","children","Header","className","Body","bg","variant","name","md","Group","Label","Range","value","onChange","e","parseInt","target","min","max","step","size","onClick","disabled","Control","as","rows","placeholder","role"],"sources":["/Users/ziqianfu/diff-grader/frontend/src/components/FeedbackPanel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, Form, Button, Row, Col, Alert, Badge } from 'react-bootstrap';\nimport { Feedback, CodeElement, ComparisonMatch } from '../types';\nimport apiService from '../services/api';\n\ninterface FeedbackPanelProps {\n  sessionId: string;\n  selectedElement?: CodeElement;\n  selectedMatch?: ComparisonMatch;\n  onFeedbackSaved: (feedback: Feedback) => void;\n  onError: (error: string) => void;\n}\n\nconst FeedbackPanel: React.FC<FeedbackPanelProps> = ({\n  sessionId,\n  selectedElement,\n  selectedMatch,\n  onFeedbackSaved,\n  onError,\n}) => {\n  const [score, setScore] = useState<number>(75);\n  const [comments, setComments] = useState<string>('');\n  const [designPatternFeedback, setDesignPatternFeedback] = useState<string>('');\n  const [bestPracticesFeedback, setBestPracticesFeedback] = useState<string>('');\n  const [saving, setSaving] = useState<boolean>(false);\n  const [existingFeedback, setExistingFeedback] = useState<Feedback | null>(null);\n\n  useEffect(() => {\n    if (selectedElement) {\n      loadExistingFeedback();\n    }\n  }, [selectedElement, sessionId]);\n\n     const loadExistingFeedback = async () => {\n     if (!selectedElement) return;\n\n     try {\n       const response = await apiService.getFeedbacks(sessionId);\n       if (response.success) {\n         const feedback = response.data.find(f => f.elementId === selectedElement!.id);\n         if (feedback) {\n           setExistingFeedback(feedback);\n           setScore(feedback.score);\n           setComments(feedback.comments);\n           setDesignPatternFeedback(feedback.designPatternFeedback);\n           setBestPracticesFeedback(feedback.bestPracticesFeedback);\n         } else {\n           resetForm();\n         }\n       }\n     } catch (error) {\n       console.error('Failed to load existing feedback:', error);\n     }\n   };\n\n  const resetForm = () => {\n    setExistingFeedback(null);\n    setScore(75);\n    setComments('');\n    setDesignPatternFeedback('');\n    setBestPracticesFeedback('');\n  };\n\n  const getScoreColor = (score: number): string => {\n    if (score >= 85) return 'success';\n    if (score >= 70) return 'warning';\n    return 'danger';\n  };\n\n  const getScoreLabel = (score: number): string => {\n    if (score >= 90) return 'Excellent';\n    if (score >= 80) return 'Good';\n    if (score >= 70) return 'Satisfactory';\n    if (score >= 60) return 'Needs Improvement';\n    return 'Poor';\n  };\n\n  const handleSave = async () => {\n    if (!selectedElement) {\n      onError('No element selected');\n      return;\n    }\n\n    setSaving(true);\n\n    try {\n             const feedbackData = {\n         comparisonId: sessionId,\n         elementId: selectedElement!.id,\n         score,\n         comments: comments.trim(),\n         designPatternFeedback: designPatternFeedback.trim(),\n         bestPracticesFeedback: bestPracticesFeedback.trim(),\n       };\n\n      let response;\n      if (existingFeedback) {\n        response = await apiService.updateFeedback(sessionId, existingFeedback.id, feedbackData);\n      } else {\n        response = await apiService.submitFeedback(sessionId, feedbackData);\n      }\n\n      if (response.success) {\n        setExistingFeedback(response.data);\n        onFeedbackSaved(response.data);\n      } else {\n        throw new Error(response.error || 'Failed to save feedback');\n      }\n    } catch (error) {\n      onError(`Failed to save feedback: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const suggestFeedback = () => {\n    if (!selectedMatch) return;\n\n    const similarity = selectedMatch.similarity;\n    const differences = selectedMatch.differences;\n\n    // Auto-suggest score based on similarity\n    const suggestedScore = Math.round(similarity * 100);\n    setScore(suggestedScore);\n\n    // Auto-suggest comments based on differences\n    if (differences.length > 0) {\n      const suggestionMap: { [key: string]: string } = {\n        'method signature': 'Consider reviewing method signatures for consistency with requirements.',\n        'naming convention': 'Pay attention to Java naming conventions (camelCase for methods/variables, PascalCase for classes).',\n        'access modifier': 'Review access modifiers - ensure proper encapsulation principles.',\n        'parameter': 'Check method parameters - ensure they match the expected interface.',\n        'return type': 'Verify return types match the specification.',\n        'exception handling': 'Consider adding proper exception handling.',\n        'comments': 'Add meaningful comments to explain complex logic.',\n      };\n\n      const suggestions = differences.map(diff => {\n        const key = Object.keys(suggestionMap).find(k => diff.toLowerCase().includes(k));\n        return key ? suggestionMap[key] : `Review: ${diff}`;\n      });\n\n      setComments(suggestions.join('\\n\\n'));\n    }\n\n         // Suggest design pattern feedback\n     if (selectedElement && selectedElement.type === 'class') {\n       setDesignPatternFeedback('Consider applying relevant design patterns like Singleton, Factory, or Strategy pattern where appropriate.');\n     } else if (selectedElement && selectedElement.type === 'method') {\n       setDesignPatternFeedback('Ensure methods follow Single Responsibility Principle and are properly abstracted.');\n     }\n\n    // Suggest best practices feedback\n    setBestPracticesFeedback('Follow Java coding standards: proper indentation, meaningful variable names, and appropriate use of access modifiers.');\n  };\n\n  if (!selectedElement) {\n    return (\n      <Card>\n        <Card.Header>\n          <h4 className=\"mb-0\">📝 Feedback Panel</h4>\n        </Card.Header>\n        <Card.Body>\n          <div className=\"text-center text-muted p-4\">\n            <i className=\"fas fa-comment-alt fa-3x mb-3\"></i>\n            <h5>Select an element to provide feedback</h5>\n            <p>Choose a code element from the comparison view to start grading</p>\n          </div>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <Card.Header>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <h4 className=\"mb-0\">📝 Feedback Panel</h4>\n          {existingFeedback && (\n            <Badge bg=\"info\">Previously Graded</Badge>\n          )}\n        </div>\n      </Card.Header>\n      <Card.Body>\n                 <Alert variant=\"light\" className=\"mb-3\">\n           <strong>Grading:</strong> {selectedElement!.name} \n           <span className=\"text-muted\"> ({selectedElement!.type})</span>\n           {selectedMatch && (\n             <div className=\"mt-1\">\n               <small>\n                 Similarity: <Badge bg={getScoreColor(selectedMatch.similarity * 100)}>\n                   {Math.round(selectedMatch.similarity * 100)}%\n                 </Badge>\n               </small>\n             </div>\n           )}\n         </Alert>\n\n        <Form>\n          <Row>\n            <Col md={6}>\n              <Form.Group className=\"mb-3\">\n                <Form.Label>\n                  Score: <strong>{score}/100</strong> \n                  <Badge bg={getScoreColor(score)} className=\"ms-2\">\n                    {getScoreLabel(score)}\n                  </Badge>\n                </Form.Label>\n                <Form.Range\n                  value={score}\n                  onChange={(e) => setScore(parseInt(e.target.value))}\n                  min={0}\n                  max={100}\n                  step={5}\n                />\n                <div className=\"d-flex justify-content-between text-muted small\">\n                  <span>0</span>\n                  <span>50</span>\n                  <span>100</span>\n                </div>\n              </Form.Group>\n            </Col>\n            <Col md={6}>\n              <div className=\"d-flex align-items-end h-100 pb-3\">\n                <Button \n                  variant=\"outline-primary\" \n                  size=\"sm\" \n                  onClick={suggestFeedback}\n                  disabled={!selectedMatch}\n                >\n                  🤖 Auto-suggest Feedback\n                </Button>\n              </div>\n            </Col>\n          </Row>\n\n          <Form.Group className=\"mb-3\">\n            <Form.Label>General Comments</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows={3}\n              value={comments}\n              onChange={(e) => setComments(e.target.value)}\n              placeholder=\"Provide specific feedback about this code element...\"\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Design Pattern Feedback</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows={2}\n              value={designPatternFeedback}\n              onChange={(e) => setDesignPatternFeedback(e.target.value)}\n              placeholder=\"Comment on design patterns usage, SOLID principles, etc...\"\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Best Practices Feedback</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows={2}\n              value={bestPracticesFeedback}\n              onChange={(e) => setBestPracticesFeedback(e.target.value)}\n              placeholder=\"Comment on coding standards, naming conventions, etc...\"\n            />\n          </Form.Group>\n\n          <div className=\"d-flex justify-content-end\">\n            <Button\n              variant=\"primary\"\n              onClick={handleSave}\n              disabled={saving || (!comments.trim() && !designPatternFeedback.trim() && !bestPracticesFeedback.trim())}\n            >\n              {saving ? (\n                <>\n                  <span className=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\n                  Saving...\n                </>\n              ) : existingFeedback ? (\n                '💾 Update Feedback'\n              ) : (\n                '💾 Save Feedback'\n              )}\n            </Button>\n          </div>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default FeedbackPanel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}